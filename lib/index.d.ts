import { AxiosRequestConfig, AxiosResponse } from 'axios';
declare const _default: {
    setErrorHandle: (handle: Function) => void;
    removeDefaultInterceptors: () => void;
    POSTJSON: <T = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T>;
    POSTFORM: <T_1 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_1>;
    GET: <T_2 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_2>;
    PUT: <T_3 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_3>;
    DELETE: <T_4 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_4>;
    PATCH: <T_5 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_5>;
    DOWNLOAD: <T_6 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_6>;
    DOWNLOADPOST: <T_7 = any>(url: string, params: any, config?: AxiosRequestConfig) => Promise<T_7>;
    create(config?: AxiosRequestConfig | undefined): import("axios").AxiosInstance;
    Cancel: import("axios").CancelStatic;
    CancelToken: import("axios").CancelTokenStatic;
    isCancel(value: any): boolean;
    all<T_8>(values: (T_8 | Promise<T_8>)[]): Promise<T_8[]>;
    spread<T_9, R>(callback: (...args: T_9[]) => R): (array: T_9[]) => R;
    isAxiosError(payload: any): payload is import("axios").AxiosError<any>;
    defaults: AxiosRequestConfig;
    interceptors: {
        request: import("axios").AxiosInterceptorManager<AxiosRequestConfig>;
        response: import("axios").AxiosInterceptorManager<AxiosResponse<any>>;
    };
    getUri(config?: AxiosRequestConfig | undefined): string;
    request<T_10 = any, R_1 = AxiosResponse<T_10>>(config: AxiosRequestConfig): Promise<R_1>;
    get<T_11 = any, R_2 = AxiosResponse<T_11>>(url: string, config?: AxiosRequestConfig | undefined): Promise<R_2>;
    delete<T_12 = any, R_3 = AxiosResponse<T_12>>(url: string, config?: AxiosRequestConfig | undefined): Promise<R_3>;
    head<T_13 = any, R_4 = AxiosResponse<T_13>>(url: string, config?: AxiosRequestConfig | undefined): Promise<R_4>;
    options<T_14 = any, R_5 = AxiosResponse<T_14>>(url: string, config?: AxiosRequestConfig | undefined): Promise<R_5>;
    post<T_15 = any, R_6 = AxiosResponse<T_15>>(url: string, data?: any, config?: AxiosRequestConfig | undefined): Promise<R_6>;
    put<T_16 = any, R_7 = AxiosResponse<T_16>>(url: string, data?: any, config?: AxiosRequestConfig | undefined): Promise<R_7>;
    patch<T_17 = any, R_8 = AxiosResponse<T_17>>(url: string, data?: any, config?: AxiosRequestConfig | undefined): Promise<R_8>;
};
export default _default;
